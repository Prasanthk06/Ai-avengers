<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Admin - Connection Manager</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .container {
            max-width: 800px;
            margin-top: 50px;
        }
        .card {
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        .connection-status {
            padding: 8px 12px;
            border-radius: 20px;
            display: inline-block;
            font-weight: 600;
            font-size: 0.9rem;
        }
        .connected {
            background-color: #d1e7dd;
            color: #0f5132;
        }
        .disconnected {
            background-color: #f8d7da;
            color: #842029;
        }
        .qr-container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            margin: 20px 0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        .qr-image {
            max-width: 300px;
            height: auto;
        }
        .refresh-btn {
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card p-4 mb-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="mb-0">WhatsApp Connection Manager</h1>
                <a href="/dashboard" class="btn btn-outline-secondary">Back to Dashboard</a>
            </div>
            
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-4">
                        <h5>Connection Status</h5>
                        <div id="status-indicator" class="connection-status disconnected">
                            Checking status...
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <h5>Client Information</h5>
                        <div id="client-info">Loading...</div>
                    </div>
                    
                    <div class="actions mt-4">
                        <button id="refresh-status" class="btn btn-primary">Refresh Status</button>
                        <button id="restart-client" class="btn btn-warning">Restart Connection</button>
                        <button id="regenerate-qr" class="btn btn-info">Regenerate QR Code</button>
                        <button id="force-reconnect" class="btn btn-danger mt-2">Force Reconnect</button>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="qr-container">
                        <h5>
                            QR Code
                            <span class="refresh-btn" title="Refresh QR Code" id="refresh-qr">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                                    <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                                </svg>
                            </span>
                        </h5>
                        <div id="qr-status">
                            <% if (lastQrTimestamp) { %>
                                <p>Last QR generated: <%= lastQrTimestamp %></p>
                                <img src="/latest-qr.png?t=<%= new Date().getTime() %>" alt="WhatsApp QR Code" class="qr-image">
                            <% } else { %>
                                <p>No QR code available. Click "Restart Connection" or "Regenerate QR Code" to generate a new one.</p>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Function to fetch and update connection status
        async function updateStatus() {
            try {
                // Add cache-busting query parameter
                const timestamp = Date.now();
                const response = await fetch(`/whatsapp-status?_=${timestamp}`, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                // Check if response is OK
                if (!response.ok) {
                    throw new Error(`Server responded with status: ${response.status}`);
                }
                
                // Get response text first to check if it's valid JSON
                const responseText = await response.text();
                let data;
                
                try {
                    // Try to parse the response as JSON
                    data = JSON.parse(responseText);
                } catch (parseError) {
                    console.error('Error parsing status response as JSON:', parseError);
                    console.log('Response was:', responseText.substring(0, 100) + '...'); // Show first 100 chars
                    
                    // Show error message in UI
                    document.getElementById('status-indicator').className = 'connection-status disconnected';
                    document.getElementById('status-indicator').textContent = 'Error connecting to server';
                    document.getElementById('client-info').innerHTML = '<p class="text-danger">Server returned invalid response. Please refresh the page or check logs.</p>';
                    
                    // Try again in 5 seconds
                    setTimeout(updateStatus, 5000);
                    return;
                }
                
                const statusIndicator = document.getElementById('status-indicator');
                const clientInfo = document.getElementById('client-info');
                
                if (data.error) {
                    // Handle server-side error
                    statusIndicator.className = 'connection-status disconnected';
                    statusIndicator.textContent = 'Error';
                    clientInfo.innerHTML = `<p class="text-danger">Server error: ${data.message}</p>`;
                    return;
                }
                
                if (data.isAuthenticated) {
                    statusIndicator.className = 'connection-status connected';
                    statusIndicator.textContent = 'Connected';
                    
                    // Format client info
                    let infoHtml = '';
                    if (data.info) {
                        infoHtml = `
                            <p><strong>Name:</strong> ${data.info.pushname || 'N/A'}</p>
                            <p><strong>Phone:</strong> ${data.info.wid || 'N/A'}</p>
                            <p><strong>Platform:</strong> ${data.info.platform || 'N/A'}</p>
                        `;
                    } else {
                        infoHtml = '<p>Client is connected but info is not available</p>';
                    }
                    clientInfo.innerHTML = infoHtml;
                } else {
                    statusIndicator.className = 'connection-status disconnected';
                    statusIndicator.textContent = 'Disconnected';
                    clientInfo.innerHTML = '<p>Not authenticated</p>';
                    
                    // Update QR status if available
                    if (data.qrAvailable && data.qrFileExists) {
                        document.getElementById('qr-status').innerHTML = `
                            <p>Last QR generated: ${data.lastQrTimestamp}</p>
                            <img src="/latest-qr.png?t=${timestamp}" alt="WhatsApp QR Code" class="qr-image">
                        `;
                    } else if (data.qrAvailable) {
                        // QR timestamp exists but file might be missing
                        document.getElementById('qr-status').innerHTML = `
                            <p>QR code file not found. Click "Regenerate QR Code" to create a new one.</p>
                        `;
                    }
                }
            } catch (error) {
                console.error('Error fetching status:', error);
                
                // Show error in UI
                document.getElementById('status-indicator').className = 'connection-status disconnected';
                document.getElementById('status-indicator').textContent = 'Connection Error';
                document.getElementById('client-info').innerHTML = `
                    <p class="text-danger">Failed to fetch WhatsApp status: ${error.message}</p>
                    <p>Please check your internet connection and server logs.</p>
                `;
                
                // Add a retry button
                if (!document.getElementById('retry-button')) {
                    const retryButton = document.createElement('button');
                    retryButton.id = 'retry-button';
                    retryButton.className = 'btn btn-primary mt-2';
                    retryButton.textContent = 'Retry Connection';
                    retryButton.onclick = updateStatus;
                    document.getElementById('client-info').appendChild(retryButton);
                }
            }
        }
        
        // Refresh QR code
        document.getElementById('refresh-qr').addEventListener('click', function() {
            const qrImage = document.querySelector('.qr-image');
            if (qrImage) {
                qrImage.src = `/latest-qr.png?t=${Date.now()}`;
            }
        });
        
        // Refresh status
        document.getElementById('refresh-status').addEventListener('click', updateStatus);
        
        // Restart client
        document.getElementById('restart-client').addEventListener('click', async function() {
            try {
                const button = this;
                button.disabled = true;
                button.textContent = 'Restarting...';
                
                const response = await fetch('/admin/whatsapp/restart', {
                    method: 'POST'
                });
                const data = await response.json();
                
                alert(data.message);
                
                // Frequent status polling after restart to catch the QR code
                let pollCount = 0;
                const maxPolls = 30; // Poll for up to 1 minute
                const pollInterval = setInterval(() => {
                    pollCount++;
                    updateStatus();
                    
                    if (pollCount >= maxPolls) {
                        clearInterval(pollInterval);
                        button.disabled = false;
                        button.textContent = 'Restart Connection';
                    }
                }, 2000); // Check every 2 seconds
                
                // Don't reload the page automatically
                // setTimeout(() => {
                //     window.location.reload();
                // }, 5000);
            } catch (error) {
                console.error('Error restarting client:', error);
                alert('Failed to restart client');
                this.disabled = false;
                this.textContent = 'Restart Connection';
            }
        });
        
        // Regenerate QR code
        document.getElementById('regenerate-qr').addEventListener('click', async function() {
            // First confirm the action
            if (!confirm('This will completely reset the WhatsApp connection and may take up to a minute. Continue?')) {
                return;
            }
            
            try {
                const button = this;
                button.disabled = true;
                button.textContent = 'Processing...';
                
                // Disable all other buttons too
                document.querySelectorAll('.actions button').forEach(btn => {
                    if (btn !== button) btn.disabled = true;
                });
                
                // Set a message immediately
                document.getElementById('qr-status').innerHTML = `
                    <div class="alert alert-warning">
                        <p><strong>QR regeneration process started.</strong></p>
                        <p>This will take about 1 minute to complete.</p>
                        <p>Please <strong>DO NOT</strong> click any buttons or refresh the page during this time.</p>
                        <div class="progress mt-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" 
                                 aria-valuenow="0" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100" 
                                 style="width: 0%">
                            </div>
                        </div>
                        <p class="text-muted mt-2" id="progress-message">Starting process...</p>
                    </div>
                `;
                
                // Start progress animation
                const progressBar = document.querySelector('.progress-bar');
                const progressMessage = document.getElementById('progress-message');
                let progress = 0;
                
                const progressInterval = setInterval(() => {
                    progress += 1;
                    if (progress <= 100) {
                        progressBar.style.width = `${progress}%`;
                        progressBar.setAttribute('aria-valuenow', progress);
                        
                        // Update progress message at certain points
                        if (progress === 10) {
                            progressMessage.textContent = 'Closing WhatsApp connection...';
                        } else if (progress === 30) {
                            progressMessage.textContent = 'Cleaning up resources...';
                        } else if (progress === 50) {
                            progressMessage.textContent = 'Waiting for system to release resources...';
                        } else if (progress === 70) {
                            progressMessage.textContent = 'Initializing new connection...';
                        } else if (progress === 90) {
                            progressMessage.textContent = 'Generating new QR code...';
                        } else if (progress === 100) {
                            progressMessage.textContent = 'Process complete! The page will refresh in 5 seconds.';
                            
                            // After reaching 100%, wait 5 seconds and refresh the page
                            setTimeout(() => {
                                window.location.reload();
                            }, 5000);
                            
                            clearInterval(progressInterval);
                        }
                    }
                }, 600); // 60 seconds total (100 * 600ms = 60000ms)
                
                // Call the API to regenerate QR (but don't wait for response)
                fetch('/admin/whatsapp/regenerate-qr', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                }).then(response => response.json())
                  .then(data => {
                      console.log('QR regeneration response:', data);
                  })
                  .catch(error => {
                      console.error('Error during QR regeneration:', error);
                      // Don't show error to user, the page will refresh anyway
                  });
                
            } catch (error) {
                console.error('Error initiating QR regeneration:', error);
                alert('An error occurred. Please try again in a few minutes.');
                
                // Re-enable buttons
                document.querySelectorAll('.actions button').forEach(btn => {
                    btn.disabled = false;
                });
                
                this.textContent = 'Regenerate QR Code';
            }
        });
        
        // Force reconnect (complete reset and reinitialize)
        document.getElementById('force-reconnect').addEventListener('click', async function() {
            if (!confirm('This will completely reset and reinitialize the WhatsApp connection. You will need to scan the QR code again. Continue?')) {
                return;
            }
            
            try {
                const button = this;
                button.disabled = true;
                button.textContent = 'Reconnecting...';
                
                // Show immediate feedback before sending request
                document.getElementById('qr-status').innerHTML = `
                    <div class="alert alert-warning">
                        <p>Starting reconnection process... This may take a minute.</p>
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                `;
                
                const response = await fetch('/whatsapp-reconnect', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                alert(data.message);
                
                // Show instructional message
                document.getElementById('qr-status').innerHTML = `
                    <div class="alert alert-info">
                        <p>Reconnection process started. Please wait 60 seconds, then refresh this page.</p>
                        <p>If no QR code appears after refreshing, click the "Refresh Status" button.</p>
                        <button class="btn btn-primary mt-2" onclick="window.location.reload()">Refresh Page</button>
                    </div>
                `;
                
                // Disable refresh status polling during reconnection to prevent interference
                clearInterval(window.statusUpdateInterval);
                
                // Allow button to be re-enabled after 3 minutes
                setTimeout(() => {
                    button.disabled = false;
                    button.textContent = 'Force Reconnect';
                }, 3 * 60 * 1000);
                
            } catch (error) {
                console.error('Error forcing reconnect:', error);
                alert('Connection error while trying to reconnect. Please refresh the page and try again.');
                
                const button = document.getElementById('force-reconnect');
                button.disabled = false;
                button.textContent = 'Force Reconnect';
            }
        });
        
        // Initial status update
        updateStatus();
        
        // Regular status updates every 10 seconds
        if (window.statusUpdateInterval) {
            clearInterval(window.statusUpdateInterval);
        }
        window.statusUpdateInterval = setInterval(updateStatus, 10000);
    </script>
</body>
</html> 